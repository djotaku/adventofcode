from . import solution_2


def test_create_tile_set():
    assert solution_2.create_tile_set('ref_input') == [['L','.','L','L','.','L','L','.','L','L'],
                                                       ['L','L','L','L','L','L','L','.','L','L'],
                                                       ['L','.','L','.','L','.','.','L','.','.'],
                                                       ['L','L','L','L','.','L','L', '.', 'L', 'L'],
                                                       ['L','.','L','L','.','L','L','.','L','L'],
                                                       ['L', '.', 'L','L','L','L','L','.','L','L'],
                                                       ['.','.','L','.','L', '.','.','.','.','.'],
                                                       ['L','L','L','L','L','L','L','L','L','L'],
                                                       ['L','.','L','L','L','L','L','L','.','L'],
                                                       ['L','.','L','L','L','L','L','.','L','L']]


def test_check_neighbors():
    tiles = [['L','.','L','L','.','L','L','.','L','L'], ['L','L','L','L','L','L','L','.','L','L'],
             ['L','.','L','.','L','.','.','L','.','.'], ['L','L','L','L','.','L','L', '.', 'L', 'L'],
             ['L','.','L','L','.','L','L','.','L','L'], ['L', '.', 'L','L','L','L','L','.','L','L'],
             ['.','.','L','.','L', '.','.','.','.','.'],['L','L','L','L','L','L','L','L','L','L'],
             ['L','.','L','L','L','L','L','L','.','L'], ['L','.','L','L','L','L','L','.','L','L']]
    assert solution_2.check_neighbors(tiles, 0, 0) is True
    assert solution_2.check_neighbors(tiles, 0, 1) is False
    assert solution_2.check_neighbors(tiles, 0, 2) is True
    assert solution_2.check_neighbors(tiles, 0, 3) is True


def test_apply_seating_rules():
    tile_set =                                         [['#','.','#','#','.','#','#','.','#','#'],
                                                        ['#','#','#','#','#','#','#','.','#','#'],
                                                        ['#','.','#','.','#','.','.','#','.','.'],
                                                        ['#','#','#','#','.','#','#','.','#','#'],
                                                        ['#','.','#','#','.','#','#','.','#','#'],
                                                        ['#','.','#','#','#','#','#','.','#','#'],
                                                        ['.','.','#','.','#','.','.','.','.','.'],
                                                        ['#','#','#','#','#','#','#','#','#','#'],
                                                        ['#','.','#','#','#','#','#','#','.','#'],
                                                        ['#','.','#','#','#','#','#','.','#','#']]

    assert solution_2.apply_seating_rules(tile_set) == [['#','.','L','L','.','L','L','.','L','#'],
                                                        ['#','L','L','L','L','L','L','.','L','L'],
                                                        ['L','.','L','.','L','.','.','L','.','.'],
                                                        ['L','L','L','L','.','L','L','.','L','L'],
                                                        ['L','.','L','L','.','L','L','.','L','L'],
                                                        ['L','.','L','L','L','L','L','.','L','L'],
                                                        ['.','.','L','.','L','.','.','.','.','.'],
                                                        ['L','L','L','L','L','L','L','L','L','#'],
                                                        ['#','.','L','L','L','L','L','L','.','L'],
                                                        ['#','.','L','L','L','L','L','.','L','#']]

    tile_set_2 =                                       [['#','.','L','L','.','L','L','.','L','#'],
                                                        ['#','L','L','L','L','L','L','.','L','L'],
                                                        ['L','.','L','.','L','.','.','L','.','.'],
                                                        ['L','L','L','L','.','L','L','.','L','L'],
                                                        ['L','.','L','L','.','L','L','.','L','L'],
                                                        ['L','.','L','L','L','L','L','.','L','L'],
                                                        ['.','.','L','.','L','.','.','.','.','.'],
                                                        ['L','L','L','L','L','L','L','L','L','#'],
                                                        ['#','.','L','L','L','L','L','L','.','L'],
                                                        ['#','.','L','L','L','L','L','.','L','#']]

    assert solution_2.apply_seating_rules(tile_set_2)==[['#','.','L','#','.','#','#','.','L','#'],
                                                        ['#','L','#','#','#','#','#','.','L','L'],
                                                        ['L','.','#','.','#','.','.','#','.','.'],
                                                        ['#','#','L','#','.','#','#','.','#','#'],
                                                        ['#','.','#','#','.','#','L','.','#','#'],
                                                        ['#','.','#','#','#','#','#','.','#','L'],
                                                        ['.','.','#','.','#','.','.','.','.','.'],
                                                        ['L','L','L','#','#','#','#','L','L','#'],
                                                        ['#','.','L','#','#','#','#','#','.','L'],
                                                        ['#','.','L','#','#','#','#','.','L','#']]


def test_find_stability():
    tile_set = solution_2.create_tile_set('ref_input')
    stable_tile_set = solution_2.find_stability(tile_set)
    assert stable_tile_set == [['#','.','L','#','.','L','#','.','L','#'],
                               ['#','L','L','L','L','L','L','.','L','L'],
                               ['L','.','L','.','L','.','.','#','.','.'],
                               ['#','#','L','#','.','#','L','.','L','#'],
                               ['L','.','L','#','.','L','L','.','L','#'],
                               ['#','.','L','L','L','L','#','.','L','L'],
                               ['.','.','#','.','L','.','.','.','.','.'],
                               ['L','L','L','#','#','#','L','L','L','#'],
                               ['#','.','L','L','L','L','L','#','.','L'],
                               ['#','.','L','#','L','L','#','.','L','#']]


def test_occupied_seats_count():
    seats = [['#','.','#','L','.','L','#','.','#','#'],
                               ['#','L','L','L','#','L','L','.','L','#'],
                               ['L','.','#','.','L','.','.','#','.','.'],
                               ['#','L','#','#','.','#','#','.','L','#'],
                               ['#','.','#','L','.','L','L','.','L','L'],
                               ['#','.','#','L','#','L','#','.','#','#'],
                               ['.','.','L','.','L','.','.','.','.','.'],
                               ['#','L','#','L','#','#','L','#','L','#'],
                               ['#','.','L','L','L','L','L','L','.','L'],
                               ['#','.','#','L','#','L','#','.','#','#']]
    assert solution_2.occupied_seats_count(seats) == 37
